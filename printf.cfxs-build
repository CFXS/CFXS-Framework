local config = ...

if config.printf == nil then
    config.printf = "light"
else
    usage_assert(type(config.printf) == "string", "printf is not a string", _G.__CFXS_FRAMEWORK_CONFIG_TEMPLATE)
end

if config.printf == "light" then
    printf("Selected light printf implementation")
    cfxs_framework:add_sources("./modules/printf/printf_light.cpp")

    if config.printf_config == nil then
        config.printf_config = {}
    end

    local default_ntoa = 32
    local default_aton = 32
    local default_support_float = true
    local default_support_exponential = false
    local default_support_long_long = true
    local default_support_ptrdiff = false

    if config.printf_config.buf_ntoa == nil then
        config.printf_config.buf_ntoa = default_ntoa
    end
    if config.printf_config.buf_aton == nil then
        config.printf_config.buf_aton = default_aton
    end
    if config.printf_config.support_float == nil then
        config.printf_config.support_float = default_support_float
    end
    if config.printf_config.support_exponential == nil then
        config.printf_config.support_exponential = default_support_exponential
    end
    if config.printf_config.support_long_long == nil then
        config.printf_config.support_long_long = default_support_long_long
    end
    if config.printf_config.support_ptrdiff == nil then
        config.printf_config.support_ptrdiff = default_support_ptrdiff
    end

    usage_assert(type(config.printf_config.buf_ntoa) == "number", "buf_ntoa is not a number", _G.__CFXS_FRAMEWORK_CONFIG_TEMPLATE)
    usage_assert(type(config.printf_config.buf_aton) == "number", "buf_aton is not a number", _G.__CFXS_FRAMEWORK_CONFIG_TEMPLATE)
    usage_assert(type(config.printf_config.support_float) == "boolean", "support_float is not a boolean", _G.__CFXS_FRAMEWORK_CONFIG_TEMPLATE)
    usage_assert(type(config.printf_config.support_exponential) == "boolean", "support_exponential is not a boolean", _G.__CFXS_FRAMEWORK_CONFIG_TEMPLATE)
    usage_assert(type(config.printf_config.support_long_long) == "boolean", "support_long_long is not a boolean", _G.__CFXS_FRAMEWORK_CONFIG_TEMPLATE)
    usage_assert(type(config.printf_config.support_ptrdiff) == "boolean", "support_ptrdiff is not a boolean", _G.__CFXS_FRAMEWORK_CONFIG_TEMPLATE)

    -- check if differs from actual default to not pollute define list
    if config.printf_config.buf_ntoa != default_ntoa then
        cfxs_framework:add_definitions("private", "PRINTF_NTOA_BUFFER_SIZE="..config.printf_config.buf_ntoa)
    end
    if config.printf_config.buf_aton != default_aton then
        cfxs_framework:add_definitions("private", "PRINTF_FTOA_BUFFER_SIZE="..config.printf_config.buf_aton)
    end
    if not config.printf_config.support_float and config.printf_config.support_float != default_support_float then 
        cfxs_framework:add_definitions("private", "PRINTF_DISABLE_SUPPORT_FLOAT")
    end
    if not config.printf_config.support_exponential and config.printf_config.support_exponential != default_support_exponential then 
        cfxs_framework:add_definitions("private", "PRINTF_DISABLE_SUPPORT_EXPONENTIAL")
    end
    if not config.printf_config.support_long_long and config.printf_config.support_long_long != default_support_long_long then 
        cfxs_framework:add_definitions("private", "PRINTF_DISABLE_SUPPORT_LONG_LONG")
    end
    if not config.printf_config.support_ptrdiff and config.printf_config.support_ptrdiff != default_support_ptrdiff then 
        cfxs_framework:add_definitions("private", "PRINTF_DISABLE_SUPPORT_PTRDIFF_T")
    end

    printf(" - ntoa buffer: "..config.printf_config.buf_ntoa)
    printf(" - aton buffer: "..config.printf_config.buf_aton)
    printf(" - Float support: "..tostring(config.printf_config.support_float))
    printf(" - Exponential support: "..tostring(config.printf_config.support_exponential))
    printf(" - long long support: "..tostring(config.printf_config.support_long_long))
    printf(" - ptrdiff_t support: "..tostring(config.printf_config.support_ptrdiff))
elseif config.printf == "default" then
    printf(" - Selected default printf implementation")
else
    error("Unsupported printf: "..config.printf)
end