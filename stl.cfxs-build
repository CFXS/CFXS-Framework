local config = ...

usage_assert(config.stl != nil, "stl not defined", _G.__CFXS_FRAMEWORK_CONFIG_TEMPLATE)
usage_assert(type(config.stl) == "string", "stl is not a string", _G.__CFXS_FRAMEWORK_CONFIG_TEMPLATE)
usage_assert(config.exceptions != nil, "exceptions not defined", _G.__CFXS_FRAMEWORK_CONFIG_TEMPLATE)
usage_assert(type(config.exceptions) == "boolean", "exceptions is not a boolean", _G.__CFXS_FRAMEWORK_CONFIG_TEMPLATE)
usage_assert(config.rtti != nil, "rtti not defined", _G.__CFXS_FRAMEWORK_CONFIG_TEMPLATE)
usage_assert(type(config.rtti) == "boolean", "rtti is not a boolean", _G.__CFXS_FRAMEWORK_CONFIG_TEMPLATE)

if config.stl == "eastl" then
    printf(" - Selected stl: eastl")
    printf(" - Exceptions "..(config.exceptions and "enabled" or "disabled"))
    printf(" - RTTI "..(config.rtti and "enabled" or "disabled"))

    cfxs_framework:add_include_paths("public", {
        "./modules/EASTL",
        "./modules/SelectSTL/eastl",
    })
    cfxs_framework:add_definitions("public", {
        "EASTL_OPENSOURCE=1",
        "EASTL_EXCEPTIONS_ENABLED="..(config.exceptions and "1" or "0"),
        "EASTL_RTTI_ENABLED="..(config.rtti and "1" or "0"),
        "stl=eastl",
    })
else
    error("Unsupported stl: "..config.stl)
end